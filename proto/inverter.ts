// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: inverter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "inverter";

export interface Inverter {
  id: string;
  inverterCode: string;
  inverterName: string;
  slaveAddress: string;
  startAddress: string;
  numberOfPoles: number;
  updatedDate: Timestamp | undefined;
  useFlag: boolean;
}

export interface CreateInverterInput {
  inverterCode: string;
  inverterName: string;
  slaveAddress: string;
  startAddress: string;
  numberOfPoles: number;
  useFlag: boolean;
}

export interface UpdateInverterInput {
  id: string;
  inverterCode: string;
  inverterName: string;
  slaveAddress: string;
  startAddress: string;
  numberOfPoles: number;
  useFlag: boolean;
}

export interface InverterIdRequest {
  id: string;
}

export interface InverterList {
  items: Inverter[];
}

export const INVERTER_PACKAGE_NAME = "inverter";

function createBaseInverter(): Inverter {
  return {
    id: "",
    inverterCode: "",
    inverterName: "",
    slaveAddress: "",
    startAddress: "",
    numberOfPoles: 0,
    updatedDate: undefined,
    useFlag: false,
  };
}

export const Inverter: MessageFns<Inverter> = {
  encode(message: Inverter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.inverterCode !== "") {
      writer.uint32(18).string(message.inverterCode);
    }
    if (message.inverterName !== "") {
      writer.uint32(26).string(message.inverterName);
    }
    if (message.slaveAddress !== "") {
      writer.uint32(34).string(message.slaveAddress);
    }
    if (message.startAddress !== "") {
      writer.uint32(42).string(message.startAddress);
    }
    if (message.numberOfPoles !== 0) {
      writer.uint32(48).int32(message.numberOfPoles);
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(message.updatedDate, writer.uint32(58).fork()).join();
    }
    if (message.useFlag !== false) {
      writer.uint32(64).bool(message.useFlag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inverter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInverter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inverterCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inverterName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.slaveAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.numberOfPoles = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedDate = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.useFlag = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateInverterInput(): CreateInverterInput {
  return { inverterCode: "", inverterName: "", slaveAddress: "", startAddress: "", numberOfPoles: 0, useFlag: false };
}

export const CreateInverterInput: MessageFns<CreateInverterInput> = {
  encode(message: CreateInverterInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inverterCode !== "") {
      writer.uint32(10).string(message.inverterCode);
    }
    if (message.inverterName !== "") {
      writer.uint32(18).string(message.inverterName);
    }
    if (message.slaveAddress !== "") {
      writer.uint32(26).string(message.slaveAddress);
    }
    if (message.startAddress !== "") {
      writer.uint32(34).string(message.startAddress);
    }
    if (message.numberOfPoles !== 0) {
      writer.uint32(40).int32(message.numberOfPoles);
    }
    if (message.useFlag !== false) {
      writer.uint32(48).bool(message.useFlag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInverterInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInverterInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inverterCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inverterName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slaveAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numberOfPoles = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.useFlag = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateInverterInput(): UpdateInverterInput {
  return {
    id: "",
    inverterCode: "",
    inverterName: "",
    slaveAddress: "",
    startAddress: "",
    numberOfPoles: 0,
    useFlag: false,
  };
}

export const UpdateInverterInput: MessageFns<UpdateInverterInput> = {
  encode(message: UpdateInverterInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.inverterCode !== "") {
      writer.uint32(18).string(message.inverterCode);
    }
    if (message.inverterName !== "") {
      writer.uint32(26).string(message.inverterName);
    }
    if (message.slaveAddress !== "") {
      writer.uint32(34).string(message.slaveAddress);
    }
    if (message.startAddress !== "") {
      writer.uint32(42).string(message.startAddress);
    }
    if (message.numberOfPoles !== 0) {
      writer.uint32(48).int32(message.numberOfPoles);
    }
    if (message.useFlag !== false) {
      writer.uint32(56).bool(message.useFlag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInverterInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInverterInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inverterCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inverterName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.slaveAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.numberOfPoles = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.useFlag = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseInverterIdRequest(): InverterIdRequest {
  return { id: "" };
}

export const InverterIdRequest: MessageFns<InverterIdRequest> = {
  encode(message: InverterIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InverterIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInverterIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseInverterList(): InverterList {
  return { items: [] };
}

export const InverterList: MessageFns<InverterList> = {
  encode(message: InverterList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      Inverter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InverterList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInverterList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(Inverter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface InverterServiceClient {
  createInverter(request: CreateInverterInput): Observable<Inverter>;

  findAll(request: Empty): Observable<InverterList>;

  findOne(request: InverterIdRequest): Observable<Inverter>;

  updateInverter(request: UpdateInverterInput): Observable<Inverter>;

  removeInverter(request: InverterIdRequest): Observable<Inverter>;
}

export interface InverterServiceController {
  createInverter(request: CreateInverterInput): Observable<Inverter>;

  findAll(request: Empty): Observable<InverterList>;

  findOne(request: InverterIdRequest): Observable<Inverter>;

  updateInverter(request: UpdateInverterInput): Observable<Inverter>;

  removeInverter(request: InverterIdRequest): Observable<Inverter>;
}

export function InverterServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createInverter", "findAll", "findOne", "updateInverter", "removeInverter"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("InverterService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("InverterService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const INVERTER_SERVICE_NAME = "InverterService";

export type InverterServiceService = typeof InverterServiceService;
export const InverterServiceService = {
  createInverter: {
    path: "/inverter.InverterService/CreateInverter",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateInverterInput): Buffer => Buffer.from(CreateInverterInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateInverterInput => CreateInverterInput.decode(value),
    responseSerialize: (value: Inverter): Buffer => Buffer.from(Inverter.encode(value).finish()),
    responseDeserialize: (value: Buffer): Inverter => Inverter.decode(value),
  },
  findAll: {
    path: "/inverter.InverterService/FindAll",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: InverterList): Buffer => Buffer.from(InverterList.encode(value).finish()),
    responseDeserialize: (value: Buffer): InverterList => InverterList.decode(value),
  },
  findOne: {
    path: "/inverter.InverterService/FindOne",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InverterIdRequest): Buffer => Buffer.from(InverterIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InverterIdRequest => InverterIdRequest.decode(value),
    responseSerialize: (value: Inverter): Buffer => Buffer.from(Inverter.encode(value).finish()),
    responseDeserialize: (value: Buffer): Inverter => Inverter.decode(value),
  },
  updateInverter: {
    path: "/inverter.InverterService/UpdateInverter",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateInverterInput): Buffer => Buffer.from(UpdateInverterInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateInverterInput => UpdateInverterInput.decode(value),
    responseSerialize: (value: Inverter): Buffer => Buffer.from(Inverter.encode(value).finish()),
    responseDeserialize: (value: Buffer): Inverter => Inverter.decode(value),
  },
  removeInverter: {
    path: "/inverter.InverterService/RemoveInverter",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InverterIdRequest): Buffer => Buffer.from(InverterIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InverterIdRequest => InverterIdRequest.decode(value),
    responseSerialize: (value: Inverter): Buffer => Buffer.from(Inverter.encode(value).finish()),
    responseDeserialize: (value: Buffer): Inverter => Inverter.decode(value),
  },
} as const;

export interface InverterServiceServer extends UntypedServiceImplementation {
  createInverter: handleUnaryCall<CreateInverterInput, Inverter>;
  findAll: handleUnaryCall<Empty, InverterList>;
  findOne: handleUnaryCall<InverterIdRequest, Inverter>;
  updateInverter: handleUnaryCall<UpdateInverterInput, Inverter>;
  removeInverter: handleUnaryCall<InverterIdRequest, Inverter>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
